const std = @import("std");
const mem = std.mem;
const testing = std.testing;

pub fn rows(allocator: mem.Allocator, letter: u8) mem.Allocator.Error![][]u8 {
    std.debug.assert(letter >= 'A');
    std.debug.assert(letter <= 'Z');

    const str_size: usize = ((letter - 'A') + 1) * 2 - 1;
    const center = str_size / 2;

    const result = try allocator.alloc([]u8, str_size);
    errdefer allocator.free(result);

    var cnt: usize = 0;
    errdefer for (0..cnt) |i| {
        allocator.free(result[i]);
    };

    while (cnt < str_size) {
        result[cnt] = try allocator.alloc(u8, str_size);
        @memset(result[cnt], ' ');
        cnt += 1;
    }

    for (0..center + 1) |i| {
        const char = 'A' + @as(u8, @intCast(i));
        result[i][center - i] = char;
        result[i][center + i] = char;
        result[str_size - i - 1][center - i] = char;
        result[str_size - i - 1][center + i] = char;
    }

    return result;
}
